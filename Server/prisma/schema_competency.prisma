generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client_competency"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_COMPETENCY")
}

model Users {
  id             String           @id @default(uuid()) @db.Char(36)
  email          String           @unique @db.VarChar(255)
  profileImage   String?          @default("noimage.jpg") @db.VarChar(255)
  firstNameTH    String?          @db.VarChar(255)
  lastNameTH     String?          @db.VarChar(255)
  firstNameEN    String?          @db.VarChar(255)
  lastNameEN     String?          @db.VarChar(255)
  phone          String?          @db.VarChar(255)
  line           String?          @db.VarChar(255)
  address        String?          @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  updated_at     DateTime         @updatedAt @db.Timestamp(0)

  profile        Profiles?        @relation("UserProfile")
  tokens         Tokens[]
  refreshTokens  RefreshTokens[]
  userRoles      UserRoles[]
}

model Profiles {
  id                   String   @id @default(uuid()) @db.Char(36)
  user_id              String   @unique @db.Char(36)
  tpqi_summary_data_id  Int?
  sfia_summary_data_id  Int?
  is_public            Boolean? @default(false)

  user                 Users    @relation("UserProfile", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([sfia_summary_data_id], map: "idx_sfia_summary_data")
  @@index([tpqi_summary_data_id], map: "idx_tpqi_summary_data")
  @@index([user_id])
}

model Tokens {
  id         String    @id @db.Char(36)
  user_id    String    @db.Char(36)
  token      String    @db.Text
  created_at DateTime  @default(now()) @db.Timestamp(0)
  expired_at DateTime? @db.Timestamp(0)

  Users      Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_token_user")
}

model RefreshTokens {
  id         Int      @id @default(autoincrement())
  token      String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    String   @db.Char(36)

  Users      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Roles {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar(50)
  description     String?           @db.Text
  created_at      DateTime          @default(now())

  userRoles       UserRoles[]
  rolePermissions RolePermissions[]
}

model UserRoles {
  id           Int      @id @default(autoincrement())
  user_id      String   @db.Char(36)
  role_id      Int
  assigned_at  DateTime @default(now())

  Users        Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Roles        Roles    @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id], map: "uix_user_role")
  @@index([role_id], map: "idx_userroles_role")
}

model Permissions {
  id              Int               @id @default(autoincrement())
  key             String            @unique @db.VarChar(100)
  description     String?           @db.Text
  created_at      DateTime          @default(now())

  rolePermissions RolePermissions[]
}

model RolePermissions {
  id             Int         @id @default(autoincrement())
  role_id        Int
  permission_id  Int
  granted_at     DateTime    @default(now())

  Roles          Roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  Permissions    Permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id], map: "uix_role_permission")
  @@index([permission_id], map: "idx_roleperms_permission")
}

model Logs {
  id            Int       @id @default(autoincrement())
  action        String    @db.VarChar(10)
  database_name String    @db.VarChar(100)
  table_name    String    @db.VarChar(50)
  record_id     Int?
  uid           String?   @db.VarChar(50)
  timestamp     DateTime? @default(now()) @db.Timestamp(0)
  parameters    String?   @db.Text
}
