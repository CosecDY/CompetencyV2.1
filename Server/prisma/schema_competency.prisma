generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client_competency"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_COMPETENCY")
}

model logs {
  id            Int       @id @default(autoincrement())
  action        String    @db.VarChar(10)
  database_name String    @db.VarChar(100)
  table_name    String    @db.VarChar(50)
  record_id     Int?
  uid           String?   @db.VarChar(50)
  timestamp     DateTime? @default(now()) @db.Timestamp(0)
  parameters    String?   @db.Text
}

model profiles {
  email                String   @id @db.VarChar(255)
  tpqi_summary_data_id Int?
  sfia_summary_data_id Int?
  is_public            Boolean? @default(false)
  users                users    @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Restrict, map: "fk_user_email")

  @@index([sfia_summary_data_id], map: "idx_sfia_summary_data")
  @@index([tpqi_summary_data_id], map: "idx_tpqi_summary_data")
}

model roles {
  role_id    Int          @id @default(autoincrement())
  role_name  String       @unique(map: "role_name") @db.VarChar(255)
  user_roles user_roles[]
}

model tokens {
  id         String    @id @db.Char(36)
  user_id    String    @db.Char(36)
  token      String    @db.Text
  created_at DateTime  @default(now()) @db.Timestamp(0)
  expired_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_user_id")

  @@index([user_id], map: "user_id")
}

model user_roles {
  user_email String @db.VarChar(255)
  role_id    Int
  users      users  @relation(fields: [user_email], references: [email], onDelete: Cascade, onUpdate: Restrict, map: "user_roles_ibfk_1")
  roles      roles  @relation(fields: [role_id], references: [role_id], onUpdate: Restrict, map: "user_roles_ibfk_2")

  @@id([user_email, role_id])
  @@index([role_id], map: "role_id")
}

model users {
  id           String       @id @db.Char(36)
  email        String       @unique(map: "email") @db.VarChar(255)
  profileImage String?      @default("noimage.jpg") @db.VarChar(255)
  firstNameTH  String?      @db.VarChar(255)
  lastNameTH   String?      @db.VarChar(255)
  firstNameEN  String?      @db.VarChar(255)
  lastNameEN   String?      @db.VarChar(255)
  phone        String?      @db.VarChar(255)
  line         String?      @db.VarChar(255)
  address      String?      @db.VarChar(255)
  created_at   DateTime     @default(now()) @db.Timestamp(0)
  updated_at   DateTime     @default(now()) @db.Timestamp(0)
  profiles     profiles?
  tokens       tokens[]
  user_roles   user_roles[]
}
