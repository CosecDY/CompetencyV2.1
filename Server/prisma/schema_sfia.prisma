generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client_sfia"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_SFIA")
}

model Category {
  id             Int     @id @default(autoincrement())
  category_text  String? @db.Text
  subcategory_id Int?
  Jobs           Jobs[]
}

model Description {
  id               Int      @id @default(autoincrement())
  description_text String?  @db.Text
  level_id         Int?
  Levels           Levels?  @relation(fields: [level_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "description_ibfk_1")
  Skills           Skills[]

  @@index([level_id], map: "level_id")
}

model Information {
  id                Int                         @id @default(autoincrement())
  info_text         String?                     @db.VarChar(255)
  skill_id          Int?
  datacollection_id Int?                       // ถ้าต้องการใช้ Datacollection อาจลบออกถ้าไม่ใช้
  date              DateTime                    @default(now()) @db.Timestamp(0)
  approval_status   Information_approval_status @default(not_approved)
  Datacollection    Datacollection?             @relation(fields: [datacollection_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "information_ibfk_2")
  Skills            Skills?                     @relation(fields: [skill_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "information_ibfk_skill")

  @@index([datacollection_id], map: "datacollection_id")
  @@index([skill_id], map: "skill_id")
}

model Jobs {
  code_job          String              @id @db.VarChar(255)
  job_name          String?             @db.VarChar(255)
  overall           String?             @db.Text
  note              String?             @db.Text
  level_id          Int?
  category_id       Int?
  Category          Category?           @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "fk_jobs_category")
  Levels            Levels[]
  sfia_summary_data sfia_summary_data[]

  @@index([category_id], map: "fk_jobs_category")
}

model Levels {
  id                Int                 @id @default(autoincrement())
  level_name        String?             @db.VarChar(255)
  code_job          String?             @db.VarChar(255)
  Description       Description[]
  Jobs              Jobs?               @relation(fields: [code_job], references: [code_job], onDelete: Cascade, map: "fk_skill_codeskill")
  sfia_summary_data sfia_summary_data[]

  @@index([code_job], map: "skill_codeskill")
}

model Skills {
  id             Int           @id @default(autoincrement())
  description_id Int
  skill_text     String?       @db.Text
  Information    Information[]
  Description    Description   @relation(fields: [description_id], references: [id], onUpdate: Restrict, map: "fk_skills_description_id")

  @@index([description_id], map: "description_id")
}

model Subcategory {
  id               Int     @id @default(autoincrement())
  subcategory_text String? @db.Text
}

model sfia_summary_data {
  id              Int      @id @default(autoincrement())
  user_email      String?  @db.VarChar(255)
  code_job        String?  @db.VarChar(255)
  level_id        Int?
  skillPercentage Decimal? @db.Decimal(5, 2)
  Jobs            Jobs?    @relation(fields: [code_job], references: [code_job], onDelete: Cascade, map: "fk_code_job")
  Levels          Levels?  @relation(fields: [level_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_level")

  @@index([code_job], map: "fk_code_job")
  @@index([level_id], map: "fk_level")
}

enum Information_approval_status {
  approved
  not_approved
}
