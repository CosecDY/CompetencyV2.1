generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client_competency"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_COMPETENCY")
}

model User {
  id             String           @id @default(uuid()) @db.Char(36)
  email          String           @unique @db.VarChar(255)
  profileImage   String?          @default("noimage.jpg") @db.VarChar(255)
  firstNameTH    String?          @db.VarChar(255)
  lastNameTH     String?          @db.VarChar(255)
  firstNameEN    String?          @db.VarChar(255)
  lastNameEN     String?          @db.VarChar(255)
  phone          String?          @db.VarChar(255)
  line           String?          @db.VarChar(255)
  address        String?          @db.VarChar(255)
  createdAt      DateTime         @default(now()) @db.Timestamp(0)
  updatedAt      DateTime         @updatedAt @db.Timestamp(0)

  profile        Profile?         @relation("UserProfile")
  tokens         Token[]
  refreshTokens  RefreshToken[]
  userRoles      UserRole[]
}

model Profile {
  id                   String   @id @default(uuid()) @db.Char(36)
  userId               String   @unique @db.Char(36)
  tpqiSummaryDataId    Int?
  sfiaSummaryDataId    Int?
  isPublic             Boolean? @default(false)

  user                 User     @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)
  @@index([sfiaSummaryDataId], map: "idx_sfia_summary_data")
  @@index([tpqiSummaryDataId], map: "idx_tpqi_summary_data")
  @@index([userId])
}

model Token {
  id         String    @id @default(uuid()) @db.Char(36)
  userId     String    @db.Char(36)
  token      String    @db.Text
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  expiredAt  DateTime? @db.Timestamp(0)

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_token_user")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  token      String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String    @db.Char(36)

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar(50)
  description     String?           @db.Text
  createdAt       DateTime          @default(now())

  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model UserRole {
  id          Int      @id @default(autoincrement())
  userId      String   @db.Char(36)
  roleId      Int
  assignedAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId], map: "uix_user_role")
  @@index([roleId], map: "idx_userroles_role")
}

model Permission {
  id              Int               @id @default(autoincrement())
  key             String            @unique @db.VarChar(100) // เช่น: view, edit, delete
  description     String?           @db.Text
  createdAt       DateTime          @default(now())

  rolePermissions RolePermission[]
  assetPermissions AssetPermission[]
}

model RolePermission {
  id             Int         @id @default(autoincrement())
  roleId         Int
  permissionId   Int
  grantedAt      DateTime    @default(now())

  role           Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission     Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId], map: "uix_role_permission")
  @@index([permissionId], map: "idx_roleperms_permission")
}

model Asset {
  id          Int               @id @default(autoincrement())
  tableName   String            @unique @db.VarChar(100)
  description String?           @db.Text

  assetPermissions AssetPermission[]
}

model AssetPermission {
  id           Int         @id @default(autoincrement())
  permissionId Int
  assetId      Int

  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  asset        Asset       @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([permissionId, assetId], map: "uix_permission_asset")
}

model Log {
  id            Int       @id @default(autoincrement())
  action        String    @db.VarChar(10)  
  databaseName  String    @db.VarChar(100)
  tableName     String    @db.VarChar(50)
  recordId      Int?
  userId        String?   @db.VarChar(50)
  timestamp     DateTime? @default(now()) @db.Timestamp(0)
  parameters    String?   @db.Text
}
