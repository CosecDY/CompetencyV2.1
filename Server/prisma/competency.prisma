generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client_competency"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_COMPETENCY")
}

enum LogAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
}

model User {
  id           String    @id @default(uuid()) @db.Char(36)
  email        String    @unique @db.VarChar(255)
  profileImage String?   @default("noimage.jpg") @db.VarChar(255)
  firstNameTH  String?   @db.VarChar(255)
  lastNameTH   String?   @db.VarChar(255)
  firstNameEN  String?   @db.VarChar(255)
  lastNameEN   String?   @db.VarChar(255)
  phone        String?   @db.VarChar(255)
  line         String?   @db.VarChar(255)
  address      String?   @db.VarChar(255)
  createdAt    DateTime  @default(now()) @db.Timestamp(0)
  updatedAt    DateTime  @updatedAt @db.Timestamp(0)

  profile     Profile?   @relation("UserProfile")
  sessions    Session[]
  userRoles   UserRole[]
   userAssetInstances UserAssetInstance[]

  @@index([email])
}

model Profile {
  id                String   @id @default(uuid()) @db.Char(36)
  userId            String   @unique @db.Char(36)
  tpqiSummaryDataId Int?
  sfiaSummaryDataId Int?
  isPublic          Boolean? @default(false)

  user              User     @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)

  @@index([sfiaSummaryDataId], map: "idx_sfia_summary_data")
  @@index([tpqiSummaryDataId], map: "idx_tpqi_summary_data")
  @@index([userId])
}

model Session {
  id             String    @id @default(uuid()) @db.Char(36)
  userId         String    @db.Char(36)
  accessToken    String    @db.Text
  refreshToken   String    @db.Text
  csrfToken      String    @db.VarChar(255)
  provider       String    @default("local") @db.VarChar(20)
  createdAt      DateTime  @default(now()) @db.Timestamp(0)
  updatedAt      DateTime  @updatedAt @db.Timestamp(0)
  expiresAt      DateTime  @db.Timestamp(0)
  lastActivityAt DateTime  @default(now()) @db.Timestamp(0)

  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model Role {
  id              Int       @id @default(autoincrement())
  name            String    @unique @db.VarChar(50)
  description     String?   @db.Text
  parentRoleId    Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  parentRole      Role?     @relation("RoleHierarchy", fields: [parentRoleId], references: [id])
  childRoles      Role[]    @relation("RoleHierarchy")

  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@index([name])
}

model UserRole {
  id          Int      @id @default(autoincrement())
  userId      String   @db.Char(36)
  roleId      Int
  assignedAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId], map: "uix_user_role")
  @@index([roleId], map: "idx_userroles_role")
  @@index([userId], map: "idx_userroles_user")
}

model Operation {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50) // เช่น view, edit, delete
  description String?      @db.Text
  updatedAt   DateTime     @updatedAt

  permissions Permission[]
}

model Asset {
  id          Int               @id @default(autoincrement())
  tableName   String            @unique @db.VarChar(100) // ชื่อ resource หรือ table
  description String?           @db.Text
  updatedAt   DateTime          @updatedAt

  permissions Permission[]
  instances   AssetInstance[]
}

model AssetInstance {
  id        Int     @id @default(autoincrement())
  assetId   Int
  recordId  String  @db.VarChar(100) // ใช้สำหรับ object-level RBAC

  asset     Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)
   userAssetInstances UserAssetInstance[]
  @@index([assetId])
  @@index([recordId])
}

model UserAssetInstance {
  id              Int           @id @default(autoincrement())
  userId          String        @db.Char(36)
  assetInstanceId Int
  assignedAt      DateTime      @default(now())

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  assetInstance   AssetInstance @relation(fields: [assetInstanceId], references: [id], onDelete: Cascade)

  @@unique([userId, assetInstanceId], map: "uix_user_asset_instance")
  @@index([userId])
  @@index([assetInstanceId])
}


model Permission {
  id          Int          @id @default(autoincrement())
  operationId Int
  assetId     Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  operation   Operation    @relation(fields: [operationId], references: [id], onDelete: Cascade)
  asset       Asset        @relation(fields: [assetId], references: [id], onDelete: Cascade)

  rolePermissions RolePermission[]

  @@unique([operationId, assetId], map: "uix_operation_asset")
  @@index([operationId])
  @@index([assetId])
}

model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int
  permissionId Int
  grantedAt    DateTime    @default(now())

  role         Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId], map: "uix_role_permission")
  @@index([permissionId], map: "idx_roleperms_permission")
  @@index([roleId], map: "idx_roleperms_role")
}

model Log {
  id           Int       @id @default(autoincrement())
  action       LogAction
  databaseName String    @db.VarChar(100)
  tableName    String    @db.VarChar(50)
  recordId     String?   @db.VarChar(100)
  userId       String?   @db.VarChar(50)
  timestamp    DateTime? @default(now()) @db.Timestamp(0)
  parameters   String?   @db.Text

  @@index([userId])
  @@index([action])
  @@index([tableName])
}
